(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{596:function(e,v,_){"use strict";_.r(v);var t=_(7),i=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"提交"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#提交"}},[e._v("#")]),e._v(" 提交")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("$ git pull")]),e._v(" 更新")]),e._v(" "),_("li",[_("code",[e._v("$ git add .")]),e._v(" 添加文件到暂存区")]),e._v(" "),_("li",[_("code",[e._v("$ git commit -m <message>")]),e._v(" 提交本地仓库")]),e._v(" "),_("li",[_("code",[e._v("$ git push")]),e._v(" 提交到远程分支")]),e._v(" "),_("li",[_("code",[e._v("$ git commit --amend")]),e._v(" 重新提交，有时提交后发现少缓存来某些修改的文件，可以执行该指令重新提交覆盖，最终只有保留最后的提交信息。")])]),e._v(" "),_("h2",{attrs:{id:"远程仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库"}},[e._v("#")]),e._v(" 远程仓库")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("$ git remote add <name> <path>")]),e._v(" 添加远程仓库地址")]),e._v(" "),_("li",[_("code",[e._v("$ git remote remove <name>")])]),e._v(" "),_("li",[_("code",[e._v("$ git remote rename <oldname> <name>")])]),e._v(" "),_("li",[_("code",[e._v("$ git remote -v")]),e._v(" 查看远程仓库信息")]),e._v(" "),_("li",[_("code",[e._v("$ git pull <remote> <branch>")]),e._v(" 拉取指定的远程分支")]),e._v(" "),_("li",[_("code",[e._v("$ git pull <remote> <branch> --allow-unrelated-histories")]),e._v(" 允许不相关历史提，强制合并")]),e._v(" "),_("li",[_("code",[e._v("$ git push origin --delete <branch>")]),e._v(" 删除远程分支")]),e._v(" "),_("li",[_("code",[e._v("$ git push -f origin master")]),e._v(" 强制覆盖（谨慎使用）")]),e._v(" "),_("li",[_("code",[e._v("$ git push <remote> --force")]),e._v(" 强行推送当前分支到远程仓库，即使有冲突")]),e._v(" "),_("li",[_("code",[e._v("$ git push -f <remote> local_branch/remote_branch")]),e._v(" 强制推送本地分支到指定远程仓库的远程分支")]),e._v(" "),_("li",[_("code",[e._v("$ git branch --set-upstream-to=origin/<branch> <local_branch>")]),e._v(" 设置本地分支和远程分支关联")])]),e._v(" "),_("h2",{attrs:{id:"config"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#config"}},[e._v("#")]),e._v(" config")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("$ git config --global user.name")]),e._v(" 查看/设置 全局昵称")]),e._v(" "),_("li",[_("code",[e._v("$ git config --global user.email")]),e._v(" 查看/设置 全局邮箱")]),e._v(" "),_("li",[_("code",[e._v("$ git config user.name")]),e._v(" 查看/设置 昵称")]),e._v(" "),_("li",[_("code",[e._v("$ git config user.email")]),e._v(" 查看/设置 邮箱")])]),e._v(" "),_("h2",{attrs:{id:"合并提交"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#合并提交"}},[e._v("#")]),e._v(" 合并提交")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("$ git merge --abort")]),e._v(" 取消合并操作")])]),e._v(" "),_("ol",[_("li",[e._v("merge 操作\n"),_("code",[e._v("git chery-pick <hash | branch >")]),_("br"),e._v(" "),_("code",[e._v("<branch>")]),e._v(" 合并为branch的最新提交信息")]),e._v(" "),_("li",[e._v("current branch\n"),_("code",[e._v("git rebase -i HEAD~2")]),e._v(" 按i键进入编辑，编辑完成后wq保存退出=> 修改提交信息"),_("br"),e._v("\n处于变基 "),_("code",[e._v('rm -fr ".git/rebase-merge"')]),_("br"),e._v("\n编辑窗口参数：\n-pick：正常选中\n-reword：选中，并且修改提交信息；\n-edit：选中，rebase时会暂停，允许你修改这个commit（参考这里）\n-squash：选中，会将当前commit与上一个commit合并\n-fixup：与squash相同，但不会保存当前commit的提交信息\n-exec：执行其他shell命令\n"),_("code",[e._v("git rebase --abort")]),e._v(" 取消变基操作\n"),_("code",[e._v("pick")]),e._v("，以同样的提交信息（commit message）保存提交"),_("br"),e._v(" "),_("code",[e._v("reword")]),e._v("，但需要重新编辑提交信息"),_("br"),e._v(" "),_("code",[e._v("edit")]),e._v("，但会因为amending而终止"),_("br"),e._v(" "),_("code",[e._v("squash")]),e._v("，但会与之前的提交合并"),_("br"),e._v(" "),_("code",[e._v("fixup")]),e._v("，但会丢掉提交日志"),_("br"),e._v(" "),_("code",[e._v("exec")]),e._v("，git会在shell中运行这个命令")])]),e._v(" "),_("h3",{attrs:{id:"合并保留作者信息-合并后仅有一个commit-当操作不方便"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#合并保留作者信息-合并后仅有一个commit-当操作不方便"}},[e._v("#")]),e._v(" 合并保留作者信息( 合并后仅有一个commit， 当操作不方便)")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("$ git rebase -i master")]),e._v(" 变基")]),e._v(" "),_("li",[_("code",[e._v("$ git checkout master")])]),e._v(" "),_("li",[_("code",[e._v("$ git merge dev")])])]),e._v(" "),_("h2",{attrs:{id:"分支操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支操作"}},[e._v("#")]),e._v(" 分支操作")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("$ git branch")]),e._v(" 查看当前分支\n"),_("ul",[_("li",[_("code",[e._v("-r")]),e._v(" 查看远程分支")]),e._v(" "),_("li",[_("code",[e._v("-a")]),e._v(" 查看所有")])])]),e._v(" "),_("li",[_("code",[e._v("$ git branch <branch>")]),e._v(" 创建分支")]),e._v(" "),_("li",[_("code",[e._v("$ git branch -m <branch> <new_branch>")]),e._v(" 重命名本地分支")]),e._v(" "),_("li",[_("code",[e._v("$ git branch -d <branch>")]),e._v(" "),_("code",[e._v("-D")]),e._v("强制删除")]),e._v(" "),_("li",[_("code",[e._v("$ git checkout <branch>")]),e._v(" 切换分支")]),e._v(" "),_("li",[_("code",[e._v("$ git checkout -b <branch>")]),e._v(" 创建并切换到新分支")]),e._v(" "),_("li",[_("code",[e._v("$ git checkout -D <branch>")]),e._v(" 删除分支")]),e._v(" "),_("li",[_("code",[e._v("$ git merge <branch>")]),e._v(" 合并分支到当前分支")]),e._v(" "),_("li",[_("code",[e._v("$ git merge --strategy-option theirs")]),e._v("  合并策略-采用远程端")]),e._v(" "),_("li",[_("code",[e._v("$ git merge --strategy-option ours")]),e._v("      合并策略-本地端")]),e._v(" "),_("li",[_("code",[e._v("$ git branch --set-upstream-to=origin/<branch> prod")]),e._v("  设置对象分支pull的远程分支")])]),e._v(" "),_("h2",{attrs:{id:"merge-配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#merge-配置"}},[e._v("#")]),e._v(" merge 配置")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("$ git merge --squash <branch>")]),e._v(" 创建单个提交而不是合并所有提交")]),e._v(" "),_("li",[_("code",[e._v("$ git merge --no-ff <branch>")]),e._v(" 禁止快进式合并，生成一个新的提交。有利于master分支的干净")]),e._v(" "),_("li",[_("code",[e._v("--allow-unrelated-histories")]),e._v(" 允许合并无关的历史")]),e._v(" "),_("li",[_("code",[e._v("$ git merge --strategy-option theirs")]),e._v(" 合并采用 他人（传入更改）")]),e._v(" "),_("li",[_("code",[e._v("$ git merge --abort")]),e._v(" 恢复到合并前")]),e._v(" "),_("li",[_("code",[e._v("$ git merge -Xours <branch>")]),e._v(" 合并冲突采用当前")]),e._v(" "),_("li",[_("code",[e._v("$ git merge -Xtheirs <branch>")]),e._v(" 合并冲突采用输入")]),e._v(" "),_("li",[_("code",[e._v("$ git checkout --patch -f <branch> <filepath>")]),e._v(" 合并单个文件到当前分支 -f强制检出")])]),e._v(" "),_("h2",{attrs:{id:"撤销"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#撤销"}},[e._v("#")]),e._v(" 撤销")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("$ git reset")]),e._v(" 撤销已缓存的所有文件，文件内容不会变化")]),e._v(" "),_("li",[_("code",[e._v("$ git reset --keep <commit>")]),e._v(" 重置HEAD为指定commit，保留暂存区和工作区")]),e._v(" "),_("li",[_("code",[e._v("$ git reset --hard <commit>")]),e._v(" 重置HEAD为指定commit，同时重置暂存区和工作区")]),e._v(" "),_("li",[_("code",[e._v("$ git push -u -f <remote> <branch>")]),e._v(" 强制同步本地仓库到远程仓库")]),e._v(" "),_("li",[_("code",[e._v("$ git reset --soft HEAD^")]),e._v(" 撤销上一次提交")]),e._v(" "),_("li",[_("code",[e._v("$ git reset remote/branch")]),e._v(" 重置为远程仓库")]),e._v(" "),_("li",[_("code",[e._v("$ git clean -xdf")]),e._v(" 放弃所有add文件（已缓存）")]),e._v(" "),_("li",[_("code",[e._v("$ git reset --hard")]),e._v(" 放弃所有本地 commit")]),e._v(" "),_("li",[_("code",[e._v("$ git reset HEAD .")]),e._v(" 放弃所有 add 文件（未缓存）")]),e._v(" "),_("li",[_("code",[e._v("$ git reset HEAD <filepath>")]),e._v(" 放弃 add 文件")]),e._v(" "),_("li",[_("code",[e._v("$ git revert -n <commit>")]),e._v(" 反做, 放弃某个commit生成一个新的commit")])]),e._v(" "),_("h2",{attrs:{id:"移除版本控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#移除版本控制"}},[e._v("#")]),e._v(" 移除版本控制")]),e._v(" "),_("ul",[_("li",[e._v("移除ignore里的版本控制\n"),_("ol",[_("li",[_("code",[e._v("$ git rm -f . --cached")]),e._v(", "),_("code",[e._v("-r")]),e._v(" 保留本地文件")]),e._v(" "),_("li",[_("code",[e._v("$ git add .")])])])])]),e._v(" "),_("h2",{attrs:{id:"多个remote-merge"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多个remote-merge"}},[e._v("#")]),e._v(" 多个remote merge")]),e._v(" "),_("blockquote",[_("p",[e._v("Merge: refusing to merge unrelated histories")])]),e._v(" "),_("ul",[_("li",[e._v("不同 remote 下合并 branch 会提示上边的错误")]),e._v(" "),_("li",[e._v("执行合并带上参数 "),_("code",[e._v("$ git merge --squarh <branch> --allow-unrelated-histories")])]),e._v(" "),_("li",[_("code",[e._v("--squash")]),e._v(" 合并branch上的commit，避免当前分支参入其他commtit历史")]),e._v(" "),_("li",[_("code",[e._v("--allow-unrelated-histories")]),e._v(" 允许合并无关的历史")]),e._v(" "),_("li",[_("code",[e._v("$ git merge --abort")]),e._v(" 解除合并状态")])]),e._v(" "),_("h2",{attrs:{id:"使用远程库资源"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用远程库资源"}},[e._v("#")]),e._v(" 使用远程库资源")]),e._v(" "),_("p",[e._v("本地pull出现冲突且本地并无修改。")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("$ git fetch --all")])]),e._v(" "),_("li",[_("code",[e._v("$ git reset --hard <remote> <branch>")])]),e._v(" "),_("li",[_("code",[e._v("$ git pull")])])]),e._v(" "),_("h2",{attrs:{id:"工作区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#工作区"}},[e._v("#")]),e._v(" 工作区")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("$ git status")]),e._v(" 查看工作区和暂存区的状态")]),e._v(" "),_("li",[_("code",[e._v("$ git stash save <messaage>")]),e._v(" 保存到临时工作区")]),e._v(" "),_("li",[_("code",[e._v("$ git stash list")]),e._v(" 查看工作区")]),e._v(" "),_("li",[_("code",[e._v("$ git stash apply stash@{0}")]),e._v(" 回到指定的工作区，默认为0")]),e._v(" "),_("li",[_("code",[e._v("$ git stash pop stash@{0}")]),e._v(" 回到指定的工作区并从栈里删除，默认为0")]),e._v(" "),_("li",[_("code",[e._v("$ git stash clear")]),e._v(" 清除所有工作区")])]),e._v(" "),_("h2",{attrs:{id:"忽略不提交"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#忽略不提交"}},[e._v("#")]),e._v(" 忽略不提交")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("$ git update-index --assume-unchanged <path>")]),e._v(" 忽略不提交路径文件")]),e._v(" "),_("li",[_("code",[e._v("$ git rm -r --cached .")]),e._v(" 清除所有缓存")])]),e._v(" "),_("h2",{attrs:{id:"log"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#log"}},[e._v("#")]),e._v(" log")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("$ git log")])]),e._v(" "),_("li",[_("code",[e._v("$ git log --stat")]),e._v(" commit概要信息")]),e._v(" "),_("li",[_("code",[e._v("$ git log -p")]),e._v(" 详细日志")]),e._v(" "),_("li",[_("code",[e._v("$ git show")]),e._v(" 查看上一次commit日志")]),e._v(" "),_("li",[_("code",[e._v("$ git show <commit>")]),e._v(" 查看特定commit日志")]),e._v(" "),_("li",[_("code",[e._v("$ git reflog")]),e._v(" 本地logs")]),e._v(" "),_("li",[_("code",[e._v("$ git log --graph")]),e._v(" 查看分支轨迹图")])]),e._v(" "),_("h2",{attrs:{id:"tag"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tag"}},[e._v("#")]),e._v(" tag")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("$ git tag v1.0")]),e._v(" 默认在head上创建一个标签")]),e._v(" "),_("li",[_("code",[e._v("$ git tag v1.0 <commit>")]),e._v(" 指定一个commit id 创建一个标签")]),e._v(" "),_("li",[_("code",[e._v("$ git tag -a <tagname> -m <content>")])]),e._v(" "),_("li",[_("code",[e._v("$ git push origin <tagname>>")]),e._v(" 推送单个tag")]),e._v(" "),_("li",[_("code",[e._v("$ git push --tags")]),e._v(" 推送本地所有为推送的tag")]),e._v(" "),_("li",[_("code",[e._v("$ git tag -d <tagname>")]),e._v(" 删除tag")]),e._v(" "),_("li",[_("code",[e._v("$ git push <remote> :refs/tags/<tagname>")]),e._v(" 删除远程origin上的tag")]),e._v(" "),_("li",[_("code",[e._v("$ git tag")]),e._v(" 查看所有标签")])]),e._v(" "),_("h2",{attrs:{id:"约定时提交规范"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#约定时提交规范"}},[e._v("#")]),e._v(" 约定时提交规范")]),e._v(" "),_("ul",[_("li",[e._v("fix fixbug, 修复bug")]),e._v(" "),_("li",[e._v("feat feature, 新增功能")]),e._v(" "),_("li",[e._v("change 变更")]),e._v(" "),_("li",[e._v("BERAKING CHANGE 破坏性变更")]),e._v(" "),_("li",[e._v("chore 琐事")])])])}),[],!1,null,null,null);v.default=i.exports}}]);