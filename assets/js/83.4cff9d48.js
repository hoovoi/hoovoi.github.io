(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{639:function(t,a,s){"use strict";s.r(a);var n=s(7),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("connect( mapStateToProps, action ); // 订阅state并且注入action创建函数")])]),t._v(" "),s("h2",{attrs:{id:"mapstatetoprops-mapstate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mapstatetoprops-mapstate"}},[t._v("#")]),t._v(" mapStateToProps( mapState )")]),t._v(" "),s("p",[t._v("从store选择被连接组件所需部分数据. "),s("code",[t._v("redux store state")]),t._v("每次改变时会调用此方法")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("> function mapStateToProps( state, ownProps? )\n\n- mapStateToProps: 订阅state，state改变会重新渲染, 不订阅则传递 null   \n- ownProps: 需要从自身props数据以检索出store\n\n```javascript\n  function mapStateToProps(state, ownProps){\n    const { id } = state\n    const { name } = ownProps\n    const userName = getUserName(id, name);\n    // 不用再返回 ownProps, connect会自动合并\n    // 额外接受\n    return { userName }\n  }\n```\n")])])]),s("h2",{attrs:{id:"action"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#action"}},[t._v("#")]),t._v(" action")]),t._v(" "),s("p",[t._v("action: 注入创建action函数，自动分发actions")])])}),[],!1,null,null,null);a.default=e.exports}}]);